@Library('jenkins-shared-library@main') _

pipeline {
    agent { label 'agent' }
    
    environment {
        DOCKER_IMAGE = "hagert/ivolve-webapp"
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        KUBERNETES_MANIFESTS_REPO = "https://github.com/Hager706/kubernetes-manifests.git"
    }
    
    stages {
        stage('Unit Test') {
            steps {
                dir('Docker/web-app') {
                    echo "Running unit tests..."
                    sh './gradlew clean test'
                }
            }
            post {
                always {
                    junit '**/build/test-results/test/*.xml'
                }
            }
        }
        
        stage('SonarQube Test') {
            steps {
                dir('Docker/web-app') {
                    withSonarQubeEnv('SonarQube') {
                        sh './gradlew sonar -Dsonar.qualitygate.wait=false'
                    }
                }
            }
        }
        
        stage('Build JAR') {
            steps {
                dir('Docker/web-app') {
                    echo "Building JAR file..."
                    sh 'chmod +x gradlew'
                    sh './gradlew build -x test'
                    archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Manage Docker Image') {
            steps {
                dir('Docker') {
                    script {
                        withCredentials([string(credentialsId: 'dockerhub-password', variable: 'PASSWORD')]) {
                            sh "docker login -u hagert -p ${PASSWORD}"
                            sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                            sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                            sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        }
                    }
                }
            }
        }
        
        stage('Delete Image Locally') {
            steps {
                echo "Cleaning up local Docker image..."
                script {
                    sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true"
                }
            }
        }
        
        stage('Update Manifests') {
            steps {
                echo "Updating Kubernetes manifests..."
                script {
                    def workspaceDir = updateManifests([
                        manifestsRepo: env.KUBERNETES_MANIFESTS_REPO,
                        credentialsId: 'git',
                        imageName: env.DOCKER_IMAGE,
                        imageTag: env.DOCKER_TAG,
                        appName: 'ivolve-webapp',
                        deploymentFile: 'deployment.yaml'
                    ])
                    // Save workspace dir for next stage
                    env.MANIFESTS_WORKSPACE = workspaceDir
                }
            }
        }
        
        stage('Push Manifests') {
            steps {
                echo "Pushing updated manifests to repository..."
                script {
                    pushManifests([
                        credentialsId: 'git',
                        workDir: env.MANIFESTS_WORKSPACE
                    ])
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}