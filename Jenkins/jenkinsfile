@Library('jenkins-shared-library') _

pipeline {
    agent {
        label 'slave'
    }
    
    environment {
        APP_NAME = 'ivolve-webapp'
        DOCKER_REGISTRY = 'hagert'
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/${APP_NAME}"
        DOCKER_CREDENTIALS_ID = 'docker'
        SONARQUBE_SERVER = 'SonarQube'
        GIT_CREDENTIALS_ID = 'git'
        MANIFEST_REPO = 'https://github.com/Hager706/kubernetes-manifests.git'
        IMAGE_TAG = "v${BUILD_NUMBER}"
    }
    
    stages {
        stage('Unit Test') {
            steps {
                dir('Docker/web-app') {  
                    echo "Running unit tests..."
                    sh './gradlew clean test'
                }
            }
            post {
                always {
                    junit '**/build/test-results/test/*.xml'
                }
            }
        }
        
        stage('SonarQube Test') {
            steps {
                dir('Docker/web-app') {  
                    withSonarQubeEnv(installationName: "${SONARQUBE_SERVER}") {
                        sh './gradlew sonar -Dsonar.qualitygate.wait=false'
                    }
                }
            }
        }
        
        stage('Build JAR') {
            steps {
                dir('Docker/web-app') {  
                    echo "Building JAR file..."
                    sh 'chmod +x gradlew'
                    sh './gradlew build -x test'
                    archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Manage Docker Image') {
            steps {
                dir('Docker') {  
                    script {
                        BuildandPushDockerimage(
                            "${DOCKER_CREDENTIALS_ID}", 
                            "${DOCKER_REGISTRY}", 
                            "${DOCKER_IMAGE}", 
                            "${IMAGE_TAG}"
                        )
                    }
                }                
            }
        }
        
        stage('Delete Image Locally') {
            steps {
                echo "Cleaning up local Docker image..."
                script {
                    deleteLocalDockerImage(
                        imageName: "${DOCKER_IMAGE}",
                        tag: "${IMAGE_TAG}"
                    )
                }
            }
        }
        
        stage('Update Manifests') {
            steps {
                echo "Updating Kubernetes manifests..."
                script {
                    // Save the returned workspace directory path
                    env.MANIFESTS_WORKSPACE = updateKubernetesManifests(
                        manifestsRepo: "${MANIFEST_REPO}",
                        credentialsId: "${GIT_CREDENTIALS_ID}",
                        imageName: "${DOCKER_IMAGE}",
                        imageTag: "${BUILD_NUMBER}",
                        appName: "${APP_NAME}",
                        deploymentFile: "deployment.yaml"
                    )
                }
            }
        }
        
    stage('Push Manifests') {
    steps {
        echo "Pushing updated manifests to repository..."
        script {
            // Use the directory path returned from the previous stage
            pushKubernetesManifests(
                credentialsId: "${GIT_CREDENTIALS_ID}",
                workDir: env.MANIFESTS_WORKSPACE,
                credentialType: 'ssh'  // Specify that you're using SSH credentials
            )
        }
    }
}}
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}