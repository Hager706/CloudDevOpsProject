---
- name: Check if SonarQube is already installed
  stat:
    path: /opt/sonarqube
  register: sonarqube_dir
  
- name: Update apt cache
  apt:
    update_cache: yes
  become: yes
  when: not sonarqube_dir.stat.exists

- name: Install required packages
  apt:
    name:
      - unzip
      - postgresql
      - postgresql-contrib
      - python3-psycopg2  # Required for PostgreSQL Ansible modules
      - pip
    state: present
  become: yes
  when: not sonarqube_dir.stat.exists

- name: Ensure psycopg2 is installed
  pip:
    name: psycopg2-binary
    state: present
  become: yes
  when: not sonarqube_dir.stat.exists

# Alternative approach if PostgreSQL commands fail
- name: Configure PostgreSQL for SonarQube manually
  block:
    - name: Create SonarQube database user
      command: >
        sudo -u postgres psql -c "CREATE USER sonarqube WITH PASSWORD 'sonarqube_password' CREATEDB SUPERUSER;"
      register: create_user_result
      failed_when: create_user_result.rc != 0 and "already exists" not in create_user_result.stderr
      changed_when: create_user_result.rc == 0
      become: yes

    - name: Create SonarQube database
      command: >
        sudo -u postgres psql -c "CREATE DATABASE sonarqube OWNER sonarqube;"
      register: create_db_result
      failed_when: create_db_result.rc != 0 and "already exists" not in create_db_result.stderr
      changed_when: create_db_result.rc == 0
      become: yes
  when: not sonarqube_dir.stat.exists

- name: Download SonarQube
  get_url:
    url: https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.0.65466.zip
    dest: /tmp/sonarqube.zip
  when: not sonarqube_dir.stat.exists

- name: Create SonarQube group
  group:
    name: sonarqube
    state: present
  become: yes
  when: not sonarqube_dir.stat.exists

- name: Create SonarQube user
  user:
    name: sonarqube
    group: sonarqube
    shell: /bin/bash
    home: /opt/sonarqube
    create_home: no
  become: yes
  when: not sonarqube_dir.stat.exists

- name: Extract SonarQube
  unarchive:
    src: /tmp/sonarqube.zip
    dest: /opt
    remote_src: yes
  become: yes
  when: not sonarqube_dir.stat.exists

- name: Check if SonarQube directory exists with version suffix
  find:
    paths: /opt
    patterns: "sonarqube-*"
    file_type: directory
  register: sonarqube_versioned_dir
  become: yes
  when: not sonarqube_dir.stat.exists

- name: Rename SonarQube directory
  command: mv {{ item.path }} /opt/sonarqube
  with_items: "{{ sonarqube_versioned_dir.files }}"
  become: yes
  when: not sonarqube_dir.stat.exists and sonarqube_versioned_dir.matched > 0

- name: Set ownership of SonarQube directory
  file:
    path: /opt/sonarqube
    owner: sonarqube
    group: sonarqube
    recurse: yes
  become: yes

- name: Configure SonarQube database connection
  lineinfile:
    path: /opt/sonarqube/conf/sonar.properties
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^#?sonar.jdbc.username=', line: 'sonar.jdbc.username=sonarqube' }
    - { regexp: '^#?sonar.jdbc.password=', line: 'sonar.jdbc.password=sonarqube_password' }
    - { regexp: '^#?sonar.jdbc.url=', line: 'sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube' }
    - { regexp: '^#?sonar.web.host=', line: 'sonar.web.host=0.0.0.0' }
    - { regexp: '^#?sonar.web.port=', line: 'sonar.web.port=9000' }
  become: yes
  notify: restart sonarqube

- name: Set system limits for SonarQube
  blockinfile:
    path: /etc/security/limits.conf
    block: |
      sonarqube   -   nofile   65536
      sonarqube   -   nproc    4096
  become: yes

- name: Set VM max map count
  sysctl:
    name: vm.max_map_count
    value: '262144'
    state: present
    reload: yes
  become: yes
    
- name: Create SonarQube systemd service
  template:
    src: sonarqube.service.j2
    dest: /etc/systemd/system/sonarqube.service
  become: yes
  notify:
    - reload systemd
    - restart sonarqube

- name: Ensure SonarQube is started and enabled
  systemd:
    name: sonarqube
    state: started
    enabled: yes
  become: yes